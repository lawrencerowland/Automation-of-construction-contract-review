{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Step 6 Create keywords for whole corpus"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview\n",
    "This can be adjusted to allow for number of words returned, and to specify how to treat keywords with similar stems. Here are the ones for the nuclear example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12236c5e0>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot(kind='barh', x='Keyword', y=\"Score\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How-to-use\n",
    "\n",
    "## Installation\n",
    "\n",
    "Check installation has been made, as per the [READme](https://github.com/lawrencerowland/Data-Model-for-Project-Frameworks/blob/master/Project-frameworks-by-using-NLP-with-Python-libraries/README.md)\n",
    "\n",
    "## Prior steps\n",
    "Steps 1-4 are optional. \n",
    "Step 5 is required. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Gensim\n",
    "The code is provided for the specific modules to be imported"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "unable to import 'smart_open.gcs', disabling that module\n"
     ]
    }
   ],
   "source": [
    "#hide\n",
    "import gensim\n",
    "from gensim.summarization import keywords\n",
    "from gensim.summarization import mz_keywords\n",
    "import matplotlib as plt\n",
    "import pandas as pd  \n",
    "# Note that Smart_open.gcs may not import successfully depending on Gensim set up. This doesnt matter. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Open the Interim results folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "import os\n",
    "directory= \"/Users/lawrence/Documents/GitHub/Data-Model-for-Project-Frameworks/Project-frameworks-by-using-NLP-with-Python-libraries/Interim-results/\"\n",
    "# Change directory location for your particular set-up.\n",
    "\n",
    "with open(os.path.join(directory,'Corpus_as_one_string.txt')) as f:\n",
    "    Corpus_as_one_string=f.read()\n",
    "    f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# List-showing-relative-prominence of these words\n",
    "This is a more complete analysis than just summing the keywords produced in Step 4, due to network effects. \n",
    "Here are the results for keywords across all ONR documents. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x123398820>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot(kind='barh', x='Keyword', y=\"Score\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Screen Shot 2020-06-17 at 16.26.04.png](attachment:5a91233f-020f-4f7b-b0a7-02ec66a84d3f.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Select the number of words required. \n",
    "The 'keywords'API uses a TextRank based on PageRank, but complemented with other measures of keyword importance.The API automatically generates word-stems, as can be seen by the results, where clusters of words with the same stems have the same score. e.g. there is requires, required, requirements etc. We drop unwanted synonyms from the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "Keywords_for_whole_corpus=keywords(Corpus_as_one_string, words=10, scores=True, lemmatize=False, deacc=False)\n",
    "# Other options are split=False, pos_filter=('NN', 'JJ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df = pd.DataFrame(Keywords_for_whole_corpus, columns =['Keyword', 'Score']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Drop those synonyms we don't want\n",
    "df=df.drop([0,2,3,5,7,8,9,10,11,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,35,36,37,38,39,41,42,44,45,46])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create interim-results file\n",
    "df.to_csv('Keywords_for_whole_corpus.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[::-1] # reverse order"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To plot the results shown above:\n",
    "\n",
    "df.plot(kind='barh', x='Keyword', y=\"Score\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Next Step\n",
    "Step 7 show how to access the relationships between selected keywords, and show it as a knowledge graph. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Postscript: Alternative keyword algorithm\n",
    "If it is helpful to compare the above results with another approach, then Gensim also has an API for another algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Montemurro and Zanette’s entropy based keyword extraction algorithm\n",
    "alternative=mz_keywords(Corpus_as_one_string,split=False,scores=False,weighted=False,threshold=\"auto\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(alternative[0:100])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Acknowledgments:\n",
    "[Kite.com](https://kite.com/python/docs/gensim.summarization.mz_keywords) has some useful information on the MZ algorithm. This is below:\n",
    "\n",
    "'This algorithm looks for keywords that contribute to the structure of the text on scales of `blocksize` words of larger. It is suitable for extracting keywords representing the major themes of long texts.'\n",
    "\n",
    "Info on parameters:\n",
    "- blocksize: int, optional: Size of blocks to use in analysis.\n",
    "- weighted: bool, optional. Whether to weight scores by word frequency. False can useful for shorter texts, and allows automatic thresholding.\n",
    "- threshold: float or 'auto', optional\n",
    "- Minimum score for returned keywords,  'auto' calculates the threshold as n_blocks / (n_blocks + 1.0) + 1e-8,\n",
    "    use 'auto' with `weighted=False`."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
